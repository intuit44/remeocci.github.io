// ===== ARCHIVO: C:\ProyectosSimbolicos\social\instagram_processor.js =====
// REEMPLAZAR EL CONTENIDO ACTUAL POR ESTE:


// IMPORTAR InstagramStoriesAutomation con manejo de errores
let InstagramStoriesAutomation;
try {
    InstagramStoriesAutomation = require('../comandos/instagram_automation');
    console.log('[IMPORT] ‚úÖ InstagramStoriesAutomation cargado exitosamente');
} catch (error) {
    console.log('[IMPORT] ‚ö†Ô∏è InstagramStoriesAutomation no encontrado, creando mock temporal');
    
    // Clase mock temporal
    InstagramStoriesAutomation = class {
        constructor() {
            this.accessToken = process.env.INSTAGRAM_ACCESS_TOKEN;
            this.accountId = process.env.INSTAGRAM_ACCOUNT_ID;
            this.isConfigured = !!(this.accessToken && this.accountId);
            console.log('[INSTAGRAM] Mock temporal inicializado');
        }
        
        async publicarStory(data) {
            console.log('[INSTAGRAM] Mock: Simulating story publication');
            return { 
                success: this.isConfigured, 
                message: this.isConfigured ? 'Story published (mock)' : 'Instagram not configured',
                mockMode: true 
            };
        }
        
        esHorarioOptimo() {
            const hora = new Date().getHours();
            return (hora >= 11 && hora <= 13) || (hora >= 18 && hora <= 21) || (hora >= 9 && hora <= 10);
        }
        
        obtenerHorariosOptimos() {
            return [
                { inicio: 9, fin: 10, descripcion: 'Horario matutino' },
                { inicio: 11, fin: 13, descripcion: 'Horario almuerzo' },
                { inicio: 18, fin: 21, descripcion: 'Horario vespertino' }
            ];
        }
    };
}

class InstagramVideoProcessor {
    constructor() {
        // Inicializar Instagram bot con manejo de errores
        try {
            this.instagramBot = new InstagramStoriesAutomation();
            console.log('[INSTAGRAM] ‚úÖ Instagram bot inicializado correctamente');
        } catch (error) {
            console.log('[INSTAGRAM] ‚ö†Ô∏è Error inicializando Instagram bot:', error.message);
            
            // Crear instancia mock si falla
            this.instagramBot = {
                esHorarioOptimo: () => {
                    const hora = new Date().getHours();
                    return (hora >= 11 && hora <= 13) || (hora >= 18 && hora <= 21);
                },
                obtenerHorariosOptimos: () => [
                    { inicio: 11, fin: 13, descripcion: 'Horario almuerzo' },
                    { inicio: 18, fin: 21, descripcion: 'Horario vespertino' }
                ],
                publicarStory: async () => ({ 
                    success: false, 
                    message: 'Instagram automation no disponible',
                    fallbackMode: true 
                }),
                isConfigured: false
            };
        }
        
        this.pendingVideos = new Map(); // Para videos esperando confirmaci√≥n
        
        // Estados de procesamiento
        this.processingStates = {
            ANALYZING: 'analyzing',
            WAITING_CONFIRMATION: 'waiting_confirmation',
            PUBLISHING: 'publishing',
            COMPLETED: 'completed',
            REJECTED: 'rejected'
        };
        
        console.log('[INSTAGRAM] InstagramVideoProcessor inicializado correctamente');
    }

    async procesarVideoParaInstagram(videoData, message, analisisIA = null) {
        try {
            console.log('[INSTAGRAM] üì± Iniciando procesamiento de video para Instagram...');
            
            const videoId = this.generarVideoId(videoData, message);
            
            // Registrar video en proceso
            this.pendingVideos.set(videoId, {
                videoData,
                message,
                analisisIA,
                timestamp: new Date().toISOString(),
                state: this.processingStates.ANALYZING
            });
            
            // Analizar video para Instagram
            const analisisInstagram = await this.analizarVideoParaInstagram(videoData, analisisIA);
            
            // Actualizar estado
            this.pendingVideos.get(videoId).state = this.processingStates.WAITING_CONFIRMATION;
            this.pendingVideos.get(videoId).analisisInstagram = analisisInstagram;
            
            // Generar mensaje de evaluaci√≥n
            const mensajeEvaluacion = this.generarMensajeEvaluacion(analisisInstagram, videoId);
            
            // Guardar log de actividad
            if (typeof guardarLogActividad === 'function') {
                guardarLogActividad({
                    tipo: 'instagram_analysis',
                    videoId,
                    puntuacion: analisisInstagram.puntuacion,
                    recomendacion: analisisInstagram.recomendacion,
                    timestamp: new Date().toISOString()
                });
            }
            
            console.log('[INSTAGRAM] ‚úÖ An√°lisis de video completado');
            return mensajeEvaluacion;
            
        } catch (error) {
            console.error('[INSTAGRAM] ‚ùå Error procesando video:', error);
            return `‚ùå Error analizando video para Instagram: ${error.message}`;
        }
    }

    async analizarVideoParaInstagram(videoData, analisisIA) {
        try {
            console.log('[INSTAGRAM] üß† Analizando contenido para redes sociales...');
            
            let puntuacion = 0;
            const criterios = [];
            const problemas = [];
            
            // CRITERIO 1: Duraci√≥n del video (20 puntos m√°ximo)
            const duracion = videoData.videoInfo?.duration || 0;
            if (duracion >= 10 && duracion <= 30) {
                puntuacion += 20;
                criterios.push('‚úÖ Duraci√≥n √≥ptima (10-30s)');
            } else if (duracion >= 5 && duracion <= 60) {
                puntuacion += 10;
                criterios.push('üî∏ Duraci√≥n aceptable');
            } else {
                problemas.push('‚ö†Ô∏è Duraci√≥n no √≥ptima para Stories');
            }
            
            // CRITERIO 2: An√°lisis de contenido con IA (30 puntos m√°ximo)
            if (analisisIA) {
                if (analisisIA.includes('personas') || analisisIA.includes('visitantes')) {
                    puntuacion += 15;
                    criterios.push('‚úÖ Personas/visitantes detectados');
                }
                
                if (analisisIA.includes('sonris') || analisisIA.includes('satisfacci√≥n') || analisisIA.includes('diversi√≥n')) {
                    puntuacion += 15;
                    criterios.push('‚úÖ Emociones positivas detectadas');
                } else {
                    problemas.push('‚ö†Ô∏è No se detectan emociones claras');
                }
            } else {
                problemas.push('‚ö†Ô∏è An√°lisis de IA no disponible');
            }
            
            // CRITERIO 3: Calidad t√©cnica (20 puntos m√°ximo)
            if (videoData.procesamiento === 'completo') {
                puntuacion += 20;
                criterios.push('‚úÖ Calidad t√©cnica alta');
            } else if (videoData.procesamiento === 'basico_sin_frames') {
                puntuacion += 10;
                criterios.push('üî∏ Calidad t√©cnica media');
            } else {
                puntuacion += 5;
                problemas.push('‚ö†Ô∏è Limitaciones t√©cnicas detectadas');
            }
            
            // CRITERIO 4: Contenido del parque (15 puntos m√°ximo)
            const textoContexto = analisisIA || '';
            if (textoContexto.toLowerCase().includes('atraccion') || 
                textoContexto.toLowerCase().includes('juego') ||
                textoContexto.toLowerCase().includes('parque')) {
                puntuacion += 15;
                criterios.push('‚úÖ Contenido del parque identificado');
            } else {
                problemas.push('‚ö†Ô∏è Contenido del parque no claro');
            }
            
            // CRITERIO 5: Horario de publicaci√≥n (15 puntos m√°ximo)
            if (this.instagramBot && this.instagramBot.esHorarioOptimo()) {
                puntuacion += 15;
                criterios.push('‚úÖ Horario √≥ptimo para publicaci√≥n');
            } else {
                puntuacion += 5;
                criterios.push('üî∏ Horario no √≥ptimo');
            }
            
            // Determinar recomendaci√≥n
            let recomendacion;
            if (puntuacion >= 70) {
                recomendacion = 'PUBLICAR_AUTOMATICO';
            } else if (puntuacion >= 50) {
                recomendacion = 'CONSULTAR_EQUIPO';
            } else {
                recomendacion = 'NO_RECOMENDADO';
            }
            
            return {
                puntuacion,
                recomendacion,
                criterios,
                problemas,
                horarioOptimo: this.instagramBot ? this.instagramBot.esHorarioOptimo() : false
            };
            
        } catch (error) {
            console.error('[INSTAGRAM] Error en an√°lisis:', error);
            return {
                puntuacion: 0,
                recomendacion: 'ERROR',
                criterios: [],
                problemas: [`Error en an√°lisis: ${error.message}`],
                horarioOptimo: false
            };
        }
    }

    // === FUNCI√ìN CORREGIDA: evaluarVideoParaInstagram ===
    // Reemplazar o agregar esta funci√≥n

    async evaluarVideoParaInstagram(videoData, analisisIA) {
        try {
            console.log('[INSTAGRAM] üì± Evaluaci√≥n simplificada...');
            
            // Si tenemos Instagram processor, usarlo
            if (this.instagramProcessor && typeof this.instagramProcessor.analizarVideoParaInstagram === 'function') {
                const analisisCompleto = await this.instagramProcessor.analizarVideoParaInstagram(videoData, analisisIA);
                
                let evaluacion = `üìä **Puntuaci√≥n:** ${analisisCompleto.puntuacion}/100\n`;
                evaluacion += `üéØ **Recomendaci√≥n:** ${analisisCompleto.recomendacion}\n\n`;
                
                if (analisisCompleto.criterios && analisisCompleto.criterios.length > 0) {
                    evaluacion += `**Criterios cumplidos:**\n`;
                    analisisCompleto.criterios.forEach(criterio => evaluacion += `${criterio}\n`);
                }
                
                return evaluacion;
            }
            
            // Evaluaci√≥n b√°sica como fallback
            let puntuacion = 30; // Base
            let factores = [];
            
            // Factor 1: Hora del d√≠a
            const hora = new Date().getHours();
            if ((hora >= 11 && hora <= 13) || (hora >= 18 && hora <= 21)) {
                puntuacion += 25;
                factores.push('‚úÖ Horario √≥ptimo para publicaci√≥n');
            } else {
                factores.push('üî∏ Horario regular');
            }
            
            // Factor 2: D√≠a de la semana
            const dia = new Date().getDay();
            if (dia >= 1 && dia <= 5) {
                puntuacion += 20;
                factores.push('‚úÖ D√≠a laboral - buena audiencia');
            } else {
                puntuacion += 15;
                factores.push('‚úÖ Fin de semana - audiencia familiar');
            }
            
            // Factor 3: Datos del video
            if (videoData && videoData.videoInfo) {
                const duracion = parseFloat(videoData.videoInfo.duration) || 0;
                if (duracion >= 10 && duracion <= 60) {
                    puntuacion += 20;
                    factores.push('‚úÖ Duraci√≥n ideal para Stories');
                }
            }
            
            // Factor 4: Origen autorizado
            puntuacion += 15;
            factores.push('‚úÖ Personal autorizado - contenido confiable');
            
            // Determinar recomendaci√≥n
            let recomendacion;
            if (puntuacion >= 80) {
                recomendacion = 'üåü **EXCELENTE** - Publicar autom√°ticamente';
            } else if (puntuacion >= 60) {
                recomendacion = 'üëç **BUENO** - Consultar al equipo';
            } else {
                recomendacion = 'ü§î **REGULAR** - Revisar antes de publicar';
            }
            
            // Generar respuesta
            let evaluacion = `üìä **Puntuaci√≥n:** ${puntuacion}/100\n`;
            evaluacion += `üéØ **Recomendaci√≥n:** ${recomendacion}\n\n`;
            evaluacion += `**Factores evaluados:**\n`;
            factores.forEach(factor => evaluacion += `${factor}\n`);
            
            return evaluacion;
            
        } catch (error) {
            console.error('[INSTAGRAM] Error en evaluaci√≥n:', error);
            return `‚ö†Ô∏è Evaluaci√≥n no disponible: ${error.message}`;
        }
    }

    generarMensajeEvaluacion(analisis, videoId) {
        let mensaje = `üì± **EVALUACI√ìN PARA INSTAGRAM STORIES** üì±\n\n`;
        
        // Puntuaci√≥n y recomendaci√≥n principal
        mensaje += `üéØ **PUNTUACI√ìN: ${analisis.puntuacion}/100**\n\n`;
        
        if (analisis.recomendacion === 'PUBLICAR_AUTOMATICO') {
            mensaje += `üåü **RECOMENDACI√ìN: PUBLICACI√ìN AUTOM√ÅTICA**\n`;
            mensaje += `Este video cumple todos los criterios de calidad para Instagram Stories.\n\n`;
        } else if (analisis.recomendacion === 'CONSULTAR_EQUIPO') {
            mensaje += `ü§î **RECOMENDACI√ìN: CONSULTAR AL EQUIPO**\n`;
            mensaje += `El video tiene potencial pero requiere revisi√≥n.\n\n`;
        } else {
            mensaje += `‚ùå **RECOMENDACI√ìN: NO PUBLICAR**\n`;
            mensaje += `El video no cumple los criterios m√≠nimos para Stories.\n\n`;
        }
        
        // Criterios cumplidos
        if (analisis.criterios.length > 0) {
            mensaje += `‚úÖ **CRITERIOS CUMPLIDOS:**\n`;
            analisis.criterios.forEach(criterio => {
                mensaje += `   ${criterio}\n`;
            });
            mensaje += `\n`;
        }
        
        // Problemas detectados
        if (analisis.problemas.length > 0) {
            mensaje += `‚ö†Ô∏è **ASPECTOS A MEJORAR:**\n`;
            analisis.problemas.forEach(problema => {
                mensaje += `   ${problema}\n`;
            });
            mensaje += `\n`;
        }
        
        // Informaci√≥n de horario
        if (analisis.horarioOptimo) {
            mensaje += `‚è∞ **HORARIO:** Momento √≥ptimo para publicaci√≥n\n\n`;
        } else {
            const horariosOptimos = this.instagramBot ? this.instagramBot.obtenerHorariosOptimos() : [];
            if (horariosOptimos.length > 0) {
                mensaje += `‚è∞ **PR√ìXIMOS HORARIOS √ìPTIMOS:**\n`;
                horariosOptimos.forEach(horario => {
                    mensaje += `   ‚Ä¢ ${horario.inicio}:00 - ${horario.fin}:00 (${horario.descripcion})\n`;
                });
                mensaje += `\n`;
            }
        }
        
        // Opciones de acci√≥n
        if (analisis.recomendacion !== 'ERROR') {
            mensaje += `üé¨ **¬øDESEAN PUBLICARLO?**\n`;
            mensaje += `üìù Respondan con el ID del video: **${videoId}**\n`;
            mensaje += `‚úÖ "**S√ç PUBLICAR ${videoId}**" para confirmar\n`;
            mensaje += `‚ùå "**NO PUBLICAR ${videoId}**" para cancelar\n\n`;
        }
        
        mensaje += `üì± **Instagram:** @playmallmcbo\n`;
        mensaje += `ü§ñ **Sistema:** An√°lisis autom√°tico con IA`;
        
        return mensaje;
    }

    generarVideoId(videoData, message) {
        const timestamp = Date.now();
        const fromUser = message.from ? message.from.slice(-4) : '0000';
        return `VID_${timestamp}_${fromUser}`;
    }

    async procesarRespuestaInstagram(message, texto) {
        try {
            const textoLower = texto.toLowerCase();
            
            // Buscar ID de video en el texto
            const videoIdMatch = texto.match(/VID_\d+_\d+/);
            if (!videoIdMatch) {
                return null; // No es una respuesta de Instagram
            }
            
            const videoId = videoIdMatch[0];
            const videoPendiente = this.pendingVideos.get(videoId);
            
            if (!videoPendiente) {
                return `‚ùå Video ${videoId} no encontrado o ya procesado.`;
            }
            
            if (textoLower.includes('s√≠ publicar') || textoLower.includes('si publicar')) {
                return await this.confirmarPublicacion(videoId);
            } else if (textoLower.includes('no publicar')) {
                return await this.cancelarPublicacion(videoId);
            }
            
            return null;
            
        } catch (error) {
            console.error('[INSTAGRAM] Error procesando respuesta:', error);
            return `‚ùå Error procesando respuesta: ${error.message}`;
        }
    }

    async confirmarPublicacion(videoId) {
        try {
            const videoPendiente = this.pendingVideos.get(videoId);
            if (!videoPendiente) {
                return `‚ùå Video ${videoId} no encontrado.`;
            }
            
            // Actualizar estado
            videoPendiente.state = this.processingStates.PUBLISHING;
            
            console.log('[INSTAGRAM] üì§ Publicando video en Instagram Stories...');
            
            // Intentar publicar con Instagram bot
            let resultadoPublicacion;
            if (this.instagramBot && typeof this.instagramBot.publicarStory === 'function') {
                resultadoPublicacion = await this.instagramBot.publicarStory(videoPendiente.videoData);
            } else {
                resultadoPublicacion = {
                    success: false,
                    message: 'Instagram bot no disponible',
                    mockMode: true
                };
            }
            
            if (resultadoPublicacion.success) {
                videoPendiente.state = this.processingStates.COMPLETED;
                this.pendingVideos.delete(videoId);
                
                let mensaje = `üéâ **PUBLICACI√ìN EXITOSA** üéâ\n\n`;
                mensaje += `üì± Video ${videoId} publicado en Instagram Stories\n`;
                mensaje += `üïê Publicado: ${new Date().toLocaleString()}\n`;
                mensaje += `üìä Alcance m√°ximo programado para horario √≥ptimo\n\n`;
                mensaje += `‚úÖ **Estado:** Publicado exitosamente\n`;
                mensaje += `üì± **Instagram:** @playmallmcbo`;
                
                return mensaje;
            } else {
                videoPendiente.state = this.processingStates.REJECTED;
                
                let mensaje = `‚ùå **ERROR EN PUBLICACI√ìN**\n\n`;
                mensaje += `Video ${videoId}: ${resultadoPublicacion.message}\n`;
                
                if (resultadoPublicacion.mockMode || resultadoPublicacion.fallbackMode) {
                    mensaje += `\nüîß **Modo de prueba activo**\n`;
                    mensaje += `El video est√° listo para publicaci√≥n cuando el sistema est√© configurado.\n`;
                }
                
                return mensaje;
            }
            
        } catch (error) {
            console.error('[INSTAGRAM] Error confirmando publicaci√≥n:', error);
            return `‚ùå Error publicando video: ${error.message}`;
        }
    }

    async cancelarPublicacion(videoId) {
        try {
            const videoPendiente = this.pendingVideos.get(videoId);
            if (!videoPendiente) {
                return `‚ùå Video ${videoId} no encontrado.`;
            }
            
            videoPendiente.state = this.processingStates.REJECTED;
            this.pendingVideos.delete(videoId);
            
            let mensaje = `‚ùå **PUBLICACI√ìN CANCELADA**\n\n`;
            mensaje += `üì± Video ${videoId} no ser√° publicado en Instagram Stories\n`;
            mensaje += `üïê Cancelado: ${new Date().toLocaleString()}\n\n`;
            mensaje += `üí° **Tip:** Para mejores resultados en pr√≥ximos videos:\n`;
            mensaje += `   ‚Ä¢ Incluir m√°s visitantes disfrutando (3-8 personas)\n`;
            mensaje += `   ‚Ä¢ Capturar momentos de diversi√≥n y sonrisas\n`;
            mensaje += `   ‚Ä¢ Mostrar atracciones en funcionamiento\n`;
            mensaje += `   ‚Ä¢ Duraci√≥n √≥ptima: 10-30 segundos`;
            
            return mensaje;
            
        } catch (error) {
            console.error('[INSTAGRAM] Error cancelando publicaci√≥n:', error);
            return `‚ùå Error cancelando publicaci√≥n: ${error.message}`;
        }
    }

    limpiarCachePendientes() {
        const ahora = Date.now();
        const TIMEOUT = 24 * 60 * 60 * 1000; // 24 horas
        
        for (const [videoId, data] of this.pendingVideos.entries()) {
            const timestamp = new Date(data.timestamp).getTime();
            if (ahora - timestamp > TIMEOUT) {
                this.pendingVideos.delete(videoId);
                console.log(`[INSTAGRAM] Video ${videoId} eliminado del cache por timeout`);
            }
        }
    }

    async evaluarVideoCompleto(analisisTecnico, analisisEmpresarial, message) {
        try {
            // Combinar an√°lisis t√©cnico y empresarial para evaluaci√≥n completa
            const datosCompletos = {
                videoInfo: { duration: 15 }, // Placeholder
                procesamiento: 'completo',
                analisisIA: `${analisisTecnico || ''} ${analisisEmpresarial || ''}`
            };
            
            return await this.analizarVideoParaInstagram(datosCompletos, datosCompletos.analisisIA);
            
        } catch (error) {
            console.error('[INSTAGRAM] Error en evaluaci√≥n completa:', error);
            return {
                puntuacion: 0,
                recomendacion: 'ERROR',
                criterios: [],
                problemas: [`Error en evaluaci√≥n: ${error.message}`],
                horarioOptimo: false
            };
        }
    }
}

module.exports = { InstagramVideoProcessor };